{"version":3,"sources":["serviceWorker.ts","Api/Api.ts","Utils/error-utils.tserror-utils.ts","features/Login/authReducer.ts","App/App-reducer.ts","features/TodolistList/tasks-reducer.ts","features/TodolistList/todolist-reducer.ts","App/Store.ts","Componets/AddItemForm/AddItemForm.tsx","Componets/EditableSpan/EditableSpan.tsx","features/TodolistList/Todolist/Task/Task.tsx","features/TodolistList/Todolist/Todolist.tsx","features/TodolistList/TodolistLists.tsx","Componets/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","Componets/Error404/Error404.tsx","App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPi","get","title","post","id","delete","put","todolistId","taskId","payload","authAPI","handleServerAppError","dispatch","message","appSetError","appSetStatus","handleServerNetworkError","data","messages","length","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","updateTaskEntityStatus","entityStatus","updateTasksTC","domainModel","getState","task","tasks","filter","t","priority","description","deadline","startDate","then","res","resultCode","taskID","todoListsID","updateTaskAC","catch","err","fetchTodolistsTC","todolists","forEach","todo","setTasksAC","items","rootReducer","combineReducers","state","action","newTask","todoListId","map","todolist","newState","stateCopy","tl","entityTaskStatus","todoLists","newTodoList","app","isInitialize","auth","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","useState","setTitle","setError","onClickAddItem","validatedTitle","trim","addItem","TextField","variant","size","onChange","e","currentTarget","onKeyPress","key","label","helperText","disabled","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","offEditMods","changeTitle","autoFocus","onBlur","onDoubleClick","Task","changeTaskTitle","changeTaskTitleCallback","useCallback","taskClass","Completed","className","Checkbox","color","checked","changeTaskStatus","New","removeTask","Delete","Todolist","addTask","changeTodoListFilter","changeTodoListTitle","removeTodoList","taskForTodoList","removeTaskCallback","changeTaskStatusCallback","taskJSXElement","changeTodoListTitleCallback","addTaskCallback","removeTodolist","onClickSetAllFilter","onClickSetActiveFilter","onClickSetCompletedFilter","style","listStyle","padding","Button","marginLeft","TodolistLists","useSelector","useDispatch","useEffect","removeTaskAC","removeTaskTC","item","addTaskTC","setEntityStatus","addTodoList","addTodolistTC","changeTodoListFilterAC","changeTodoListTitleAC","changeTodolistTitleTC","to","todoListComponents","arrayTasksTodolistID","Grid","Paper","elevation","container","spacing","Alert","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validationSchema","Yup","min","required","onSubmit","values","resetForm","justify","xs","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","errors","FormControlLabel","control","Error404","history","useHistory","textAlign","fontSize","push","App","finally","position","top","width","CircularProgress","AppBar","Toolbar","justifyContent","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.75133d3e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { RequestStatusType } from '../App/App-reducer';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ed866548-b66a-44f9-8f52-2b761c116c4c'\r\n    }\r\n})\r\n\r\n\r\nexport const todolistAPi = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistType }>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(title: string, id: string) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, payload: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, payload)\r\n    },\r\n}\r\nexport const authAPI = {\r\n    login(payload:LoginParamsType) {\r\n        return instance.post<CommonResponseType<{userId:string}>>(`auth/login`,payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`auth/login`)\r\n    },\r\n    me(){\r\n        return instance.get<CommonResponseType<MeResponseType>>(`auth/me`)\r\n    }\r\n}\r\nexport type MeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captcha?:string\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate:  string\r\n    deadline:  string\r\n    addedDate: string\r\n    entityTaskStatus:RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type CommonResponseType<T = {}> = {\r\n    data: T\r\n    messages: Array<string>\r\n    fieldsErrors: []\r\n    resultCode: number\r\n\r\n}\r\nexport type GetTasksResponse = {\r\n    error:string | null\r\n    totalCount:number\r\n    items:Array<TaskType>\r\n}","\r\nimport {Dispatch} from 'redux';\r\nimport {CommonResponseType} from '../Api/Api';\r\nimport {appSetError, AppSetErrorAT, appSetStatus, AppSetStatusAT} from '../App/App-reducer';\r\n\r\n\r\nexport const handleServerAppError = (dispatch: Dispatch<ErrorActionType>, message: string) => {\r\n    dispatch(appSetError(message))\r\n    dispatch(appSetStatus('failed'))\r\n}\r\nexport const handleServerNetworkError = <T>(dispatch: Dispatch<ErrorActionType>, data:CommonResponseType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(appSetError(data.messages[0]))\r\n    } else {\r\n        dispatch(appSetError('Some error occurred'))\r\n    }\r\n    dispatch(appSetStatus('failed'))\r\n}\r\ntype ErrorActionType =\r\n    | AppSetStatusAT\r\n    | AppSetErrorAT","import {AppThunk} from '../../App/Store';\r\nimport {appSetError, AppSetErrorAT, appSetStatus, AppSetStatusAT} from '../../App/App-reducer';\r\nimport {authAPI, LoginParamsType} from '../../Api/Api';\r\nimport {AxiosError} from 'axios';\r\nimport {handleServerAppError} from '../../Utils/error-utils.tserror-utils';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'LOGIN/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'LOGIN/SET-IS-LOGGED-IN', value} as const)\r\nexport const clearDataAfterLogoutAppAC = () => ({type: 'LOGIN/CLEAR-DATA'} as const)\r\n\r\n// thunks\r\nexport const loginTC = (payload: LoginParamsType): AppThunk => (dispatch) => {\r\n    dispatch(appSetStatus('loading'))\r\n //   debugger\r\n    authAPI.login(payload)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(appSetStatus('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(appSetError(res.data.messages[0]))\r\n                    dispatch(appSetStatus('failed'))\r\n                }\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerAppError(dispatch, err.message)\r\n        })\r\n}\r\nexport const logoutTC = (): AppThunk => (dispatch) => {\r\n    dispatch(appSetStatus('loading'))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(appSetStatus('succeeded'))\r\n                dispatch(clearDataAfterLogoutAppAC())\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(appSetError(res.data.messages[0]))\r\n                    dispatch(appSetStatus('failed'))\r\n                }\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerAppError(dispatch, err.message)\r\n        })\r\n}\r\n\r\n// types\r\nexport type SetIsLoggedInAT = ReturnType<typeof setIsLoggedInAC>\r\nexport type ClearDataAfterLogoutAppAT = ReturnType<typeof clearDataAfterLogoutAppAC>\r\nexport type AuthActionsType =\r\n    | SetIsLoggedInAT\r\n    | AppSetStatusAT\r\n    | AppSetErrorAT\r\n    | ClearDataAfterLogoutAppAT\r\n","import {AppThunk} from './Store';\r\nimport {authAPI} from '../Api/Api';\r\nimport {setIsLoggedInAC, SetIsLoggedInAT} from '../features/Login/authReducer';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZE':\r\n\r\n            return {...state, isInitialized: action.isInitialize}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//AC\r\nexport const appSetStatus = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const appSetError = (error: string | null) => ({type: 'APP/SET-ERROR', error}) as const\r\nexport const setIsInitialize = (isInitialize: boolean) => ({type: 'APP/SET-IS-INITIALIZE', isInitialize} as const)\r\n//TC\r\nexport const initializeAppTC = (): AppThunk => (dispatch) => {\r\n\r\n\r\n    authAPI.me()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0){\r\n                dispatch(setIsLoggedInAC(true))\r\n            }\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setIsInitialize(true))\r\n        })\r\n}\r\n//AT\r\nexport type AppSetErrorAT = ReturnType<typeof appSetError>\r\nexport type  AppSetStatusAT = ReturnType<typeof appSetStatus>\r\nexport type AppSetIsInitializeAT = ReturnType<typeof setIsInitialize>\r\nexport type AppActionsType =\r\n    | AppSetStatusAT\r\n    | AppSetErrorAT\r\n    | AppSetIsInitializeAT\r\n    | SetIsLoggedInAT\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistAPi, UpdateTaskModelType,} from '../../Api/Api';\r\nimport {AppThunk} from '../../App/Store';\r\nimport {Dispatch} from 'redux';\r\nimport {AddTodoListAT, RemoveTodolistAT, SetTodolistsAT} from './todolist-reducer';\r\nimport {appSetError, AppSetErrorAT, appSetStatus, AppSetStatusAT, RequestStatusType} from '../../App/App-reducer';\r\nimport {AxiosError} from 'axios';\r\nimport {handleServerAppError} from '../../Utils/error-utils.tserror-utils';\r\nimport {ClearDataAfterLogoutAppAT} from '../Login/authReducer';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n//const initialState = {}\r\n//type InitialStateType = typeof initialState\r\n\r\nexport const tasksReducer = (state = initialState, action: TasksActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todoListsID]: state[action.todoListsID].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            const newTask: TaskType = action.task\r\n            return {...state, [action.task.todoListId]: [newTask, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASKS':\r\n            return {\r\n                ...state, [action.todoListsID]: state[action.todoListsID]\r\n                    .map(t => t.id === action.taskID ? {...t, ...action.payload} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            let newState = {...state}\r\n            delete newState[action.todoListsID]\r\n            return newState\r\n        case 'SET-TODOLISTS': {\r\n            let stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                return stateCopy[tl.id] = [];\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASKS': {\r\n\r\n            let stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.task\r\n            return stateCopy\r\n        }\r\n        case 'UPDATE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, entityTaskStatus: action.entityStatus} : t)\r\n            }\r\n        case 'LOGIN/CLEAR-DATA':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// Action Creator\r\nexport const removeTaskAC = (taskId: string, todoListsID: string) =>\r\n    ({type: 'REMOVE-TASK', taskId: taskId, todoListsID: todoListsID} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskID: string, payload: UpdateTaskModelType, todoListsID: string) =>\r\n    ({type: 'UPDATE-TASKS', taskID, payload, todoListsID} as const)\r\nconst setTasksAC = (task: Array<TaskType>, todolistId: string) => ({type: 'SET-TASKS', task, todolistId,} as const)\r\nexport const updateTaskEntityStatus = (entityStatus: RequestStatusType, todolistId: string, taskId: string) =>\r\n    ({type: 'UPDATE-TASK-ENTITY-STATUS', entityStatus, todolistId, taskId} as const)\r\n\r\n\r\n// Thunk Creator\r\nexport const setTasksTC = (todolistId: string): AppThunk => (dispatch: Dispatch) => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistAPi.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(appSetStatus('succeeded'))\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string): AppThunk => (dispatch: Dispatch) => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistAPi.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(appSetStatus('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(appSetError(res.data.messages[0]))\r\n                    dispatch(appSetStatus('failed'))\r\n                }\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerAppError(dispatch, err.message)\r\n        })\r\n\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string): AppThunk => (dispatch: Dispatch) => {\r\n    dispatch(appSetStatus('loading'))\r\n    dispatch(updateTaskEntityStatus('loading', todolistId, taskId))\r\n    todolistAPi.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(appSetStatus('succeeded'))\r\n                dispatch(updateTaskEntityStatus('succeeded', todolistId, taskId))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(appSetError(res.data.messages[0]))\r\n                    dispatch(appSetStatus('failed'))\r\n                    dispatch(updateTaskEntityStatus('failed', todolistId, taskId))\r\n                }\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerAppError(dispatch, err.message)\r\n        })\r\n}\r\n\r\nexport const updateTasksTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType): AppThunk => (dispatch: Dispatch, getState) => {\r\n    let task = getState().tasks[todolistId].filter(t => t.id === taskId)[0]\r\n    if (task) {\r\n        const payload: UpdateTaskModelType = {\r\n            title: task.title,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            startDate: task.startDate,\r\n            ...domainModel\r\n        }\r\n        dispatch(updateTaskEntityStatus('loading', todolistId, taskId))\r\n        dispatch(appSetStatus('loading'))\r\n        todolistAPi.updateTask(todolistId, taskId, payload)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, payload, todolistId))\r\n                    dispatch(appSetStatus('succeeded'))\r\n                    dispatch(updateTaskEntityStatus('succeeded', todolistId, taskId))\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(appSetError(res.data.messages[0]))\r\n                        dispatch(appSetStatus('failed'))\r\n                        dispatch(updateTaskEntityStatus('failed', todolistId, taskId))\r\n                    }\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerAppError(dispatch, err.message)\r\n            })\r\n    }\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type UpdateTaskEntityStatus = ReturnType<typeof updateTaskEntityStatus>\r\nexport type UpdateTaskAT = ReturnType<typeof updateTaskAC>\r\nexport type RemoveTaskAT = ReturnType<typeof removeTaskAC>\r\nexport type AddTaskAT = ReturnType<typeof addTaskAC>\r\nexport type SetTasksAT = ReturnType<typeof setTasksAC>\r\n\r\n\r\nexport type TasksActionType =\r\n    | RemoveTaskAT\r\n    | AddTaskAT\r\n    | AddTodoListAT\r\n    | RemoveTodolistAT\r\n    | SetTodolistsAT\r\n    | SetTasksAT\r\n    | UpdateTaskAT\r\n    | AppSetStatusAT\r\n    | AppSetErrorAT\r\n    | UpdateTaskEntityStatus\r\n    | ClearDataAfterLogoutAppAT","import {todolistAPi, TodolistType} from '../../Api/Api';\r\nimport {AppThunk} from '../../App/Store';\r\nimport {Dispatch} from 'redux';\r\nimport {AppSetErrorAT, appSetStatus, AppSetStatusAT, RequestStatusType} from '../../App/App-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../Utils/error-utils.tserror-utils';\r\nimport {AxiosError} from 'axios';\r\nimport {setTasksTC} from './tasks-reducer';\r\nimport {ClearDataAfterLogoutAppAT} from '../Login/authReducer';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todoListsReducer = (state = initialState, action: TodolistActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.todoListsID)\r\n        case 'ADD-TODOLIST':\r\n            const newTodoList: TodolistDomainType = {...action.todolist, filter: 'all', entityStatus: 'idle'}\r\n            return [newTodoList, ...state]\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todoListsID ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todoListsID ? {...tl, title: action.title} : tl)\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => {\r\n                return {...tl, filter: 'all', entityStatus: 'idle'}\r\n            })\r\n        }\r\n        case 'SET-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case 'LOGIN/CLEAR-DATA':\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListsID: string) => ({type: 'REMOVE-TODOLIST', todoListsID} as const)\r\nexport const addTodoListAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist,} as const)\r\nexport const changeTodoListFilterAC = (todoListsID: string, filter: FilterValuesType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', todoListsID, filter} as const)\r\nexport const changeTodoListTitleAC = (todoListsID: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', todoListsID, title} as const)\r\nconst setTodolists = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nconst setEntityStatus = (entityStatus: RequestStatusType, todolistId: string) =>\r\n    ({type: 'SET-ENTITY-STATUS', entityStatus, todolistId}) as const\r\n\r\nexport const fetchTodolistsTC = (): AppThunk => (dispatch) => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistAPi.getTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolists(res.data))\r\n            dispatch(appSetStatus('succeeded'))\r\n            return res.data\r\n        })\r\n        .then((res) => {\r\n            res.forEach(todo => {\r\n                dispatch(setTasksTC(todo.id))\r\n            })\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => (dispatch: Dispatch) => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistAPi.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(appSetStatus('succeeded'))\r\n            } else {\r\n                handleServerNetworkError<{}>(dispatch, res.data)\r\n            }\r\n\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerAppError(dispatch, err.message)\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => (dispatch: Dispatch) => {\r\n    dispatch(appSetStatus('loading'))\r\n    dispatch(setEntityStatus('loading', todolistId))\r\n    todolistAPi.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodoListAC(todolistId))\r\n                dispatch(appSetStatus('succeeded'))\r\n            } else {\r\n                handleServerNetworkError<{}>(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerAppError(dispatch, err.message)\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (title: string, todolistId: string): AppThunk => (dispatch: Dispatch) => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistAPi.updateTodolist(title, todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodoListTitleAC(todolistId, title))\r\n                dispatch(appSetStatus('succeeded'))\r\n            } else {\r\n                handleServerNetworkError<{}>(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerAppError(dispatch, err.message)\r\n        })\r\n\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype  SetEntityStatusAT = ReturnType<typeof setEntityStatus>\r\ntype ChangeTodoListTitleAT = ReturnType<typeof changeTodoListTitleAC>\r\ntype ChangeTodoListFilterAT = ReturnType<typeof changeTodoListFilterAC>\r\nexport type RemoveTodolistAT = ReturnType<typeof removeTodoListAC>\r\nexport type AddTodoListAT = ReturnType<typeof addTodoListAC>\r\nexport type SetTodolistsAT = ReturnType<typeof setTodolists>\r\n\r\nexport type TodolistActionType =\r\n    | RemoveTodolistAT\r\n    | AddTodoListAT\r\n    | ChangeTodoListFilterAT\r\n    | ChangeTodoListTitleAT\r\n    | SetTodolistsAT\r\n    | AppSetStatusAT\r\n    | AppSetErrorAT\r\n    | SetEntityStatusAT\r\n    | ClearDataAfterLogoutAppAT","import {TasksActionType, tasksReducer} from '../features/TodolistList/tasks-reducer';\r\nimport {TodolistActionType, todoListsReducer} from '../features/TodolistList/todolist-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {AppActionsType, appReducer} from './App-reducer';\r\nimport {AuthActionsType, authReducer} from '../features/Login/authReducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// export const store = configureStore({\r\n//     reducer:rootReducer,\r\n//     middleware:(getDefaultMiddleware) => getDefaultMiddleware().concat(thunk),\r\n//\r\n// })\r\n\r\n// // Infer the `RootState` and `AppDispatch` types from the store itself\r\n// export type RootState = ReturnType<typeof store.getState>\r\n// // Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\n// export type AppDispatch = typeof store.dispatch\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppThunkRootActionType =\r\n    | TasksActionType\r\n    | TodolistActionType\r\n    | AppActionsType\r\n    | AuthActionsType\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppThunkRootActionType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormProps = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const AddItemForm = React.memo((props: AddItemFormProps) => {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onChangeKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem()\r\n        }\r\n    }\r\n    const onClickAddItem = () => {\r\n        const validatedTitle = title.trim()\r\n        if (validatedTitle) {\r\n            props.addItem(validatedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n    //const errorMessage = error ? <div style = {{color:'red' }}> Text  is required!</div>: null\r\n\r\n    return (\r\n\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={title}\r\n                onChange={onChangeTitle}// event\r\n                onKeyPress={onChangeKeyPress}\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n                disabled={props.disabled}\r\n            />\r\n\r\n            <IconButton\r\n                disabled={props.disabled}\r\n                onClick={onClickAddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n})","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) =>{\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onEditMods = () => setEditMode(true)\r\n    const offEditMods = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const onEnterOffEditMode = (e:KeyboardEvent<HTMLInputElement>)=>{\r\n        if (e.key === 'Enter'){\r\n            offEditMods()\r\n        }\r\n    }\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField\r\n\r\n                value={title}\r\n                autoFocus={true}// почитати\r\n                onBlur={offEditMods}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterOffEditMode}\r\n\r\n            />\r\n\r\n            // <input\r\n            //     value={title}\r\n            //     autoFocus={true}// почитати\r\n            //     onBlur={offEditMods}\r\n            //     onChange={onChangeTitle}\r\n            //     onKeyPress={onEnterOffEditMode}\r\n            // />\r\n            : <span onDoubleClick={onEditMods}>{props.title}</span>\r\n    );\r\n})","import {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from '../../../../Componets/EditableSpan/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport React, {ChangeEvent, useCallback} from 'react';\r\nimport {TaskStatuses, TaskType} from '../../../../Api/Api';\r\n\r\n\r\ntype TaskPropsType = {\r\n    todoListsID: string\r\n    task: TaskType\r\n    removeTask: (taskId: string, todoListsID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todoListsID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListsID: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({task, todoListsID, changeTaskTitle, ...props}: TaskPropsType) => {\r\n    //console.log('Task')\r\n    const removeTask = () =>\r\n        props.removeTask(task.id, todoListsID)\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n        props.changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoListsID)\r\n    const changeTaskTitleCallback = useCallback((title: string) =>\r\n        changeTaskTitle(task.id, title, todoListsID), [changeTaskTitle, task.id, todoListsID])\r\n    let taskClass = task.status === TaskStatuses.Completed ? 'is-Done' : ''\r\n    return (\r\n        <li key={task.id}>\r\n               <span className={taskClass}>\r\n                <Checkbox\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    checked={task.status === TaskStatuses.Completed}\r\n                    onChange={changeTaskStatus}\r\n                    disabled = {task.entityTaskStatus === 'loading'}\r\n                />\r\n                 <EditableSpan\r\n                     title={task.title}\r\n                     changeTitle={changeTaskTitleCallback}\r\n                     //disabled = {task.entityTaskStatus === 'loading'}\r\n\r\n                 />\r\n\r\n               </span>\r\n            <IconButton aria-label=\"delete\" onClick={removeTask}\r\n                        disabled = {task.entityTaskStatus === 'loading'}\r\n            >\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    );\r\n\r\n})","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from '../../../Componets/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../Componets/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from '../../../Api/Api';\r\nimport {FilterValuesType, TodolistDomainType} from '../todolist-reducer';\r\n\r\n\r\ntype PropsTodoListType = {\r\n    todoListsID: string\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListsID: string) => void\r\n    addTask: (title: string, todoListsID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListsID: string) => void\r\n    changeTodoListFilter: (filterValue: FilterValuesType, todoListsID: string) => void\r\n    changeTodoListTitle: (title: string, todoListsID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todoListsID: string) => void\r\n    removeTodoList: (todoListsID: string) => void\r\n};\r\n\r\n\r\nexport const Todolist = React.memo((props: PropsTodoListType) => {\r\n    const {\r\n        todoListsID,\r\n        todolist,\r\n        tasks,\r\n        removeTask,\r\n        addTask,\r\n        changeTaskTitle,\r\n        changeTodoListFilter,\r\n        changeTodoListTitle,\r\n        changeTaskStatus,\r\n        removeTodoList\r\n    } = props;\r\n    //const dispatch = useDispatch()\r\n    // useEffect(() => {\r\n    //     dispatch(setTasksTC(todoListsID))\r\n    // }, [])\r\n\r\n    let taskForTodoList = tasks\r\n    if (todolist.filter === 'active') {\r\n        taskForTodoList = taskForTodoList.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        taskForTodoList = taskForTodoList.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const removeTaskCallback = useCallback((taskId: string, todoListsID: string) =>\r\n        removeTask(taskId, todoListsID), [removeTask])\r\n    const changeTaskStatusCallback = useCallback((taskId: string, status: TaskStatuses, todoListsID: string) =>\r\n        changeTaskStatus(taskId, status, todoListsID), [changeTaskStatus])\r\n    const changeTaskTitleCallback = useCallback((taskId: string, title: string, todoListsID: string) =>\r\n        changeTaskTitle(taskId, title, todoListsID), [changeTaskTitle])\r\n    const taskJSXElement = taskForTodoList.map(t => {\r\n        return (\r\n            <Task\r\n                key={t.id}\r\n                todoListsID={todoListsID}\r\n                task={t}\r\n                removeTask={removeTaskCallback}\r\n                changeTaskStatus={changeTaskStatusCallback}\r\n                changeTaskTitle={changeTaskTitleCallback}\r\n            />\r\n        )\r\n    })\r\n    const changeTodoListTitleCallback = useCallback((title: string) =>\r\n        changeTodoListTitle(title, todoListsID), [changeTodoListTitle, todoListsID])\r\n    const addTaskCallback = useCallback((title: string) =>\r\n        addTask(title, todoListsID), [addTask, todoListsID])\r\n    const removeTodolist = useCallback(() =>\r\n        removeTodoList(todoListsID), [removeTodoList, todoListsID])\r\n    const onClickSetAllFilter = useCallback(() =>\r\n        changeTodoListFilter('all', todoListsID), [changeTodoListFilter, todoListsID])\r\n    const onClickSetActiveFilter = useCallback(() =>\r\n        changeTodoListFilter('active', todoListsID), [changeTodoListFilter, todoListsID])\r\n    const onClickSetCompletedFilter = useCallback(() =>\r\n        changeTodoListFilter('completed', todoListsID), [changeTodoListFilter, todoListsID])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={todolist.title} changeTitle={changeTodoListTitleCallback}/>\r\n                <IconButton aria-label=\"delete\" onClick={removeTodolist}\r\n                            disabled = {todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm\r\n                addItem={addTaskCallback}\r\n                disabled = {todolist.entityStatus === 'loading'}\r\n            />\r\n            <ul style={{listStyle: 'none', padding: '0px'}}>\r\n                {taskJSXElement}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    style={{marginLeft: '2px'}}\r\n                    size={'small'}\r\n                    variant={todolist.filter === 'all' ? 'contained' : 'outlined'}\r\n                    color={todolist.filter === 'all' ? 'primary' : 'secondary'}\r\n                    // className={props.filter === 'all' ? 'active-filter' : ''}\r\n                    onClick={onClickSetAllFilter}>All\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '2px'}}\r\n                    size={'small'}\r\n                    variant={todolist.filter === 'active' ? 'contained' : 'outlined'}\r\n                    color={todolist.filter === 'active' ? 'primary' : 'secondary'}\r\n                    // className={props.filter === 'active' ? 'active-filter' : ''}\r\n                    onClick={onClickSetActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '2px'}}\r\n                    size={'small'}\r\n                    variant={todolist.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    color={todolist.filter === 'completed' ? 'primary' : 'secondary'}\r\n                    // className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                    onClick={onClickSetCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Todolist;\r\n","import {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../App/Store';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodoListFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolist-reducer';\r\nimport {\r\n    addTaskTC,\r\n    updateTasksTC,\r\n    removeTaskTC,\r\n    TasksStateType\r\n} from './tasks-reducer';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {TaskStatuses, TaskType} from '../../Api/Api';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport Todolist from './Todolist/Todolist';\r\nimport {AddItemForm} from '../../Componets/AddItemForm/AddItemForm';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nexport const TodolistLists = () => {\r\n    const todoLists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n\r\n        if (!isLoggedIn){\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, todoListsID: string) => {\r\n        dispatch(removeTaskTC(todoListsID, taskId))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todoListsID: string) => {\r\n        dispatch(addTaskTC(todoListsID, title))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskID: string, status: TaskStatuses, todoListsID: string) => {\r\n        dispatch(updateTasksTC(todoListsID, taskID, {status}))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskID: string, title: string, todoListsID: string) => {\r\n        dispatch(updateTasksTC(todoListsID, taskID, {title}))\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListsID: string) => {\r\n        dispatch(removeTodolistTC(todoListsID))\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n    const changeTodoListFilter = useCallback((filter: FilterValuesType, todoListsID: string) => {\r\n        let action = changeTodoListFilterAC(todoListsID, filter)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTodoListTitle = useCallback((title: string, todoListsID: string) => {\r\n        dispatch(changeTodolistTitleTC(title, todoListsID))\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn){\r\n\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n//UI: User Interface\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n\r\n        let arrayTasksTodolistID: Array<TaskType> = tasks[tl.id]\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={5} style={{padding: '20px'}}>\r\n                    <Todolist\r\n                        todoListsID={tl.id}\r\n                        tasks={arrayTasksTodolistID}\r\n                        todolist = {tl}\r\n                        removeTask={removeTask}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n\r\n\r\n        );\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px 0px'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={5}>\r\n                {todoListComponents}\r\n            </Grid>\r\n\r\n        </>);\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../App/Store';\r\nimport {appSetError} from '../../App/App-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(appSetError(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../App/Store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {loginTC} from './authReducer';\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        /** Yup validators (biblios)*/\r\n        validationSchema: Yup.object({\r\n            password: Yup.string()\r\n                .min(4, 'Must be 4 characters or more')\r\n                .required('Required'),\r\n            email: Yup.string().email('Invalid email address').required('Required'),\r\n        }),\r\n        onSubmit: values => {\r\n            //  alert(JSON.stringify(values, null, 2));\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n\r\n        },\r\n    });\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        /> {formik.touched.password && formik.errors.password &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {Button} from '@material-ui/core';\r\nimport React from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\nexport const Error404: React.FC = () => {\r\n    const history = useHistory();\r\n\r\n    const onClickHandler = () => {\r\n        let path = `/login`;\r\n        history.push(path);\r\n    }\r\n    return <>\r\n        <h1 style={{textAlign: 'center', fontSize: '55px'}}>The page you're looking for can't be found! </h1>\r\n        <h3 style={{textAlign: 'center'}}>Error 404</h3>\r\n        <div style={{textAlign: 'center'}}>\r\n            <Button\r\n                variant={'contained'}\r\n                color={'primary'}\r\n                onClick={onClickHandler}>Ok</Button>\r\n        </div>\r\n    </>\r\n}","import React, {useEffect} from 'react';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodolistLists} from '../features/TodolistList/TodolistLists';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './Store';\r\nimport {initializeAppTC, RequestStatusType} from './App-reducer';\r\nimport {ErrorSnackbar} from '../Componets/ErrorSnackbar/ErrorSnackbar';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport {Error404} from '../Componets/Error404/Error404';\r\nimport {logoutTC} from '../features/Login/authReducer';\r\n\r\nexport function App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const onClickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        Todolists\r\n                    </Typography>\r\n                    {isLoggedIn ?\r\n                        <Button onClick={onClickHandler} color={'inherit'} variant={'outlined'}>Log out</Button>\r\n                        : <div></div>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistLists/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <Error404/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './App/Store';\r\nimport {App} from './App/App';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}